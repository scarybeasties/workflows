name: Node - Build Production

on:
  workflow_call:
    inputs:
      include_iframe:
        description: 'Include iFrame'
        type: string
        default: "false"
      deployment_directory:
        description: 'Deployment Directory'
        type: string
        default: ""
      build_language:
        description: 'build_language'
        type: string
        default: "en"
      folder_to_deploy_from:
        description: 'Folder To Deploy From'
        type: string
        default: "dist-en"

jobs:
  build:
    name: Build Production
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key to chekout a private repo
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.NODE_AUDIO_SSH_KEY }}

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Update Deployment Directory
        run: deployment_directory=${deployment_directory/${branch}/${{ steps.branch-name.outputs.current_branch }}}

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Update build.config.json
        run: echo "`jq '.includeIFrame=${{ inputs.include_iframe }}' build.config.json`" > build.config.json

      - name: Force a single language
        run: echo "`jq '.buildSingleLanguage="${{ inputs.build_language }}"' build.config.json`" > build.config.json

      - name: Get version code
        id: version_code
        uses: lucasfe/version_code_generator@v1.0.0

      - name: Authenticate with private NPM package
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_PAT }}" > ~/.npmrc

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Setup NPM
        run: npm ci --ignore-scripts
      - run: npm rebuild && npm run prepare --if-present
      - run: npm run build:prod

      - name: Zip Artifacts
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r dist-en.zip ${{ inputs.folder_to_deploy_from }}

      - name: Get dropbox token
        run: echo "DB_ACCES_TOKEN=$(curl https://api.dropbox.com/oauth2/token -d refresh_token=${{secrets.DROPBOX_REFRESH_TOKEN}} -d grant_type=refresh_token -d client_id=${{secrets.DROPBOX_CLIENT_ID}} -d client_secret=${{secrets.DROPBOX_CLIENT_SECRET}} | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")" >> $GITHUB_ENV

      - name: Archive to Dropbox
        run: |
            curl -X POST https://content.dropboxapi.com/2/files/upload \
              --header "Authorization: Bearer ${{ env.DB_ACCES_TOKEN }}" \
              --header "Dropbox-API-Arg: {\"autorename\":false,\"mode\":\"add\",\"mute\":false,\"path\":\"${{ format('/Clients/AppBuilds/{0}/{0}_{1}.zip', github.event.repository.name, steps.version_code.outputs.code) }}\",\"strict_conflict\":false}" \
              --header "Content-Type: application/octet-stream" \
              --header 'Dropbox-API-Path-Root: {".tag": "root", "root": "10680416816"}' \
              --header "Dropbox-API-Select-Admin: ${{ secrets.DB_ADMIN_ID }}" \
              --data-binary @"dist-en.zip"

      - name: Check if Sky Kids Zip File Exists
        id: skyKidsZip
        run: |
          for file in /dist/sky/*.zip
          do
              if [ -f "${file}" ]; then
              echo "exists=1" >> "$GITHUB_OUTPUT"
              echo "path=$file" >> "$GITHUB_OUTPUT"
              break
              fi
          done

      - name: Archive Sky Kids Zip to Dropbox
        if: ${{ steps.skyKidsZip.outputs.exists == 1 }}
        run: |
            curl -X POST https://content.dropboxapi.com/2/files/upload \
              --header "Authorization: Bearer ${{ env.DB_ACCES_TOKEN }}" \
              --header "Dropbox-API-Arg: {\"autorename\":false,\"mode\":\"add\",\"mute\":false,\"path\":\"${{ format('/Clients/AppBuilds/{0}{1}/{0}{1}_{2}.zip', github.event.repository.name, 'SkyKidsApp', steps.version_code.outputs.code) }}\",\"strict_conflict\":false}" \
              --header "Content-Type: application/octet-stream" \
              --header 'Dropbox-API-Path-Root: {".tag": "root", "root": "10680416816"}' \
              --header "Dropbox-API-Select-Admin: ${{ secrets.DB_ADMIN_ID }}" \
              --data-binary ${{ steps.skyKidsZip.outputs.path }}

      - name: FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ftp.scarybserver.com
          username: github@scarybserver.com
          password: ${{ secrets.ftp_password }}
          local-dir: ${{ inputs.folder_to_deploy_from }}/
          server-dir: ${{ inputs.deployment_directory }}/${{ steps.version_code.outputs.code }}/

      - name: Notify Teams
        if: ${{ success() }}
        run: |
           extras="{}"
           if [[ ${{ steps.skyKidsZip.outputs.exists }} == 1 ]]
           then
            extras="{\"name\":\"Sky Kids Archive Location\",\"value\":\"${{ format('/Clients/AppBuilds/{0}{1}/{0}{1}_{2}.zip', github.event.repository.name,'SkyKidsApp', steps.version_code.outputs.code) }}\"}"
           fi
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"Production build deployed!","themeColor":"00ff00","title":"$GITHUB_REPOSITORY production build deployed ðŸš€","sections":[{"facts":[{"name":"URL:","value":"http://www.scarybserver.com/clients/${{ inputs.deployment_directory }}/${{ steps.version_code.outputs.code }}"},{"name":"Dropbox Archive Location","value":"${{ format('/Clients/AppBuilds/{0}/{0}_{1}.zip', github.event.repository.name, steps.version_code.outputs.code) }}"},"$extras",{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json