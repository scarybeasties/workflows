name: SB - iOS

on:
  workflow_call: 
    inputs:
      development_build:
        description: 'Development Build'
        type: string
        default: 'false'
      bundle_id:
        type: string
        description: 'Bundle ID to use'
        default: ""
      apple_id:
        type: string
        description: 'Apple id of the clients store page'
        default: ""
      destination:
        type: string
        description: 'Destination of build'
        default: "AppCenter"
      offset_version_number:
        description: 'Offset Version Number Amount'
        type: string
        default: "0"

jobs:
  buildForiOS:
    name: Build iOS Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        with:
          path: |
            .git
            Assets
            Library
            ProjectSettings
            Temp
          key: Library-iOS-${{ github.ref }}
          restore-keys: Library-iOS-

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          submodules: recursive
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: false

      - name: Get version code
        id: version_code
        uses: lucasfe/version_code_generator@v1.0.0

      - shell: bash
        run: |
          expr ${{ steps.version_code.outputs.code }} > buildNumber.txt

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          VERSION: none
        with:
          targetPlatform: iOS
          buildMethod: ScaryBeasties.BuildSettings.Builder.BuildSettings.CommandLineBuild
          versioning: Custom
          version: none
          customParameters: -platform iOS -development ${{ inputs.development_build }} -bundle_id ${{ inputs.bundle_id }} -project_name ${{ github.event.repository.name }} -addressables_profile Default -build_number ${{ steps.version_code.outputs.code }} -build_number_offset ${{ inputs.offset_version_number }} 

      - uses: actions/upload-artifact@v2
        with:
          name: build-iOS
          path: build/iOS

      - uses: actions/upload-artifact@v2
        with:
          name: buildNumber
          path: buildNumber.txt

  releaseToAppCenter:
    if: ${{ inputs.destination == 'AppCenter' }}
    name: Release to App Center
    runs-on: macos-latest
    needs: buildForiOS
    steps:
      - name: Setup Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Checkout Certs
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.MATCH_REPOSITORY }}
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./certs

      - name: Checkout Fastlane
        uses: actions/checkout@v2
        with:
          repository: scarybeasties/Fastlane
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./fastlane

      - uses: actions/cache@v2
        with:
          # Path to Derived Data
          path: .local_derived_data
          # Restore cache by Podfile.lock hashsum  
          key: ${{ runner.os }}-pods-derived-data-${{ hashFiles( format('{0}/build/iOS/Podfile.lock', github.workspace)) }}


      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-iOS
          path: build/iOS

      - name: Download buildNumber Artifact
        uses: actions/download-artifact@v2
        with:
          name: buildNumber
          path: buildNumber.txt

      - name: Fix File Permissions and Run fastlane
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          SB_CERTIFICATE_PASSWORD: ${{ secrets.SB_CERTIFICATE_PASSWORD }}

          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}
          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}

          APPCENTER_API_TOKEN: ${{ secrets.APPCENTER_API_TOKEN }}
          APPCENTER_OWNER: ${{ secrets.APPCENTER_OWNER }}

          BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
          BUNDLE_ID: ${{ inputs.bundle_id }}
          PROJECT_NAME: ${{ github.event.repository.name }}

        run: |
          pwd
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          find $BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          cd fastlane
          bundle install
          bundle exec fastlane ios BuildAppCenter

      - name: Read buildNumber file
        id: version_code
        run: echo "code=$(cat buildNumber.txt)" >> $GITHUB_OUTPUT

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-iOS

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: buildNumber

      - name: Notify Teams
        if: ${{ success() }}
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"iOS AppCenter Build Deployed!","themeColor":"00ff00","title":"$GITHUB_REPOSITORY iOS AppCenter Build Deployed! ðŸ¤–","sections":[{"facts":[{"name":"Build Number", "value":"${{ steps.version_code.outputs.code }}"},{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

  releaseToSBTestflight:
    if: ${{ inputs.destination == 'SB Testflight' }}
    name: Release to SB Testflight
    runs-on: macos-latest
    needs: buildForiOS
    steps:

      - name: Setup Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
           xcode-version: latest-stable

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Download buildNumber Artifact
        uses: actions/download-artifact@v2
        with:
          name: buildNumber
          path: buildNumber.txt

      - name: Read buildNumber file
        id: version_code
        run: echo "code=$(cat buildNumber.txt)" >> $GITHUB_OUTPUT

      - name: Notify Teams
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"iOS SB Testflight Build started!","themeColor":"ffa200","title":"$GITHUB_REPOSITORY iOS SB Testflight Build Started","sections":[{"facts":[{"name":"Build Number", "value":"${{ steps.version_code.outputs.code }}"},{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

      - name: Checkout Certs
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.MATCH_REPOSITORY }}
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./certs

      - name: Checkout Fastlane
        uses: actions/checkout@v2
        with:
          repository: scarybeasties/Fastlane
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./fastlane

      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-iOS
          path: build/iOS

      - uses: mikehardy/buildcache-action@v1

      - name: Run SB Fastlane
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          SB_CERTIFICATE_PASSWORD: ${{ secrets.SB_CERTIFICATE_PASSWORD }}

          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}
          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}

          APPCENTER_API_TOKEN: ${{ secrets.APPCENTER_API_TOKEN }}
          APPCENTER_OWNER: ${{ secrets.APPCENTER_OWNER }}

          BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
          BUNDLE_ID: ${{ inputs.bundle_id }}
          PROJECT_NAME: ${{ github.event.repository.name }}

          BUILD_NUMBER: ${{ steps.version_code.outputs.code }}
          BRANCH_NAME: $GITHUB_REF_NAME

        run: |
          pwd
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          find $BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          cd fastlane
          bundle install
          bundle exec fastlane ios BuildSBTestFlight

      - name: Zip build for release if tagged
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          cd fastlane/
          zip -r iOS.zip *
          cd -
          mv fastlane/iOS.zip ${{ github.ref }}.zip

      - name: Create release if tagged
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release asset if tagged
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ github.ref }}.zip
          asset_name: ${{ github.ref }}.zip
          asset_content_type: application/zip

      - name: Upload build folder to github if not tagged
        uses: actions/upload-artifact@v4
        if: ${{ success() && !startsWith(github.ref, 'refs/tags/v') }}
        with:
          name: ios-project
          path: build/iOS/
          retention-days: 5

      - name: Upload IPA to github if not tagged
        uses: actions/upload-artifact@v4
        if: ${{ success() && !startsWith(github.ref, 'refs/tags/v') }}
        with:
          name: ipa
          path: ${{ format('{0}/fastlane/', github.workspace) }}
          retention-days: 5

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-iOS

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: buildNumber

      - name: Notify Teams
        if: ${{ success() }}
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"iOS SB Testflight Build Deployed!","themeColor":"00ff00","title":"$GITHUB_REPOSITORY iOS SB Testflight Build Deployed! ðŸš€","sections":[{"facts":[{"name":"Build Number", "value":"${{ steps.version_code.outputs.code }}"},{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json
