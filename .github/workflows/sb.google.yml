name: SB - Google

on:
  workflow_call: 
    inputs:
      development_build:
        description: 'Development Build'
        type: string
        default: "false"
      bundle_id:
        type: string
        description: 'Bundle ID to use'
        default: ""
      build_aab_bundle:
        description: 'Build AAB Bundle'
        type: string
        default: "false"
      destination:
        description: 'Destination of build'
        type: string
        default: "AppCenter"
      android_ndk_version: 
        description: 'optional NDK version'
        type: string
        default: ""
      offset_version_number:
        description: 'Offset Version Number Amount'
        type: string
        default: "0"

jobs:
  buildForGooglePlayPlatformDevelopment:
    name: Build Android (Google Play) Project
    runs-on: ubuntu-latest
    steps:
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
      - name: Checkout reusable workflow dir
        uses: actions/checkout@v3
        with:
          repository: scarybeasties/workflows
          path: workflows
      # Free up disk space
      - name: Free disk space
        run: workflows/.github/workflows/free_disk_space.sh
      - name: Setup NDK Version
        id: setup-ndk
        if: ${{ inputs.android_ndk_version != '' }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ inputs.android_ndk_version }}

      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          submodules: recursive
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Checkout Build Tools
        uses: actions/checkout@v2
        with:
          repository: scarybeasties/AndroidBuildTools
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./AndroidBuildTools

      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-Android

      - name: Get version code
        id: version_code
        uses: lucasfe/version_code_generator@v1.0.0

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: Android
          androidAppBundle: ${{ github.event.inputs.build_aab_bundle }}
          buildMethod: ScaryBeasties.BuildSettings.Builder.BuildSettings.CommandLineBuild
          versioning: Custom
          version: none
          customParameters: -platform Google -development ${{ inputs.development_build }} -project_name ${{ github.event.repository.name }} -bundle_id ${{ inputs.bundle_id }} -addressables_profile Default -app_bundles ${{ inputs.build_aab_bundle }} -android_ndk_home ${{ steps.setup-ndk.outputs.ndk-path }} -build_number ${{ steps.version_code.outputs.code }} -build_number_offset ${{ inputs.offset_version_number }}

      - name: Rename apk binary file 
        run: sudo mv Google/**/*.apk Google/Android.apk || true
      - name: Rename aab binary file 
        run: sudo mv Google/**/*.aab Google/Android.aab || true

      - name: Create the app on AppCenter if it doesnt exist
        if: ${{ inputs.destination == 'AppCenter' }}
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        continue-on-error: true
        with:
          command: appcenter apps create -d ${{ github.event.repository.name }}_Android -n ${{ github.event.repository.name }}_Android -o Android -p Unity
          token: ${{secrets.APPCENTER_API_TOKEN}}

      - name: Upload APK to AppCenter
        if: ${{ inputs.destination == 'AppCenter' }}
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        continue-on-error: true
        with:
          command: appcenter distribute release -f ${{ inputs.build_aab_bundle == 'true' && 'Google/Android.aab' || 'Google/Android.apk' }} -a phil-bn62/${{ github.event.repository.name }}_Android --group Collaborators --silent
          token: ${{secrets.APPCENTER_API_TOKEN}}

      - name: Get dropbox token
        if: ${{ inputs.destination == 'Dropbox' }}
        run: echo "DB_ACCES_TOKEN=$(curl https://api.dropbox.com/oauth2/token -d refresh_token=${{secrets.DROPBOX_REFRESH_TOKEN}} -d grant_type=refresh_token -d client_id=${{secrets.DROPBOX_CLIENT_ID}} -d client_secret=${{secrets.DROPBOX_CLIENT_SECRET}} | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")" >> $GITHUB_ENV

      - name: Archive to Dropbox
        if: ${{ inputs.destination == 'Dropbox' }}
        run: |
            curl -X POST https://content.dropboxapi.com/2/files/upload \
              --header "Authorization: Bearer ${{ env.DB_ACCES_TOKEN }}" \
              --header "Dropbox-API-Arg: {\"autorename\":false,\"mode\":\"add\",\"mute\":false,\"path\":\"${{ format('/Clients/AppBuilds/{0}/{0}_{1}{2}', github.event.repository.name, steps.version_code.outputs.code,(inputs.build_aab_bundle == 'true' && '.aab' ||  '.apk'  )) }}\",\"strict_conflict\":false}" \
              --header "Content-Type: application/octet-stream" \
              --header 'Dropbox-API-Path-Root: {".tag": "root", "root": "10680416816"}' \
              --header "Dropbox-API-Select-Admin: ${{ secrets.DB_ADMIN_ID }}" \
              --data-binary @"${{ inputs.build_aab_bundle == 'true' && 'Google/Android.aab' ||  'Google/Android.apk'  }}"

      - name: Archive to Github
        uses: actions/upload-artifact@v3
        if: ${{ inputs.destination == 'Github' }}
        with:
          name: android-binary
          path: ${{ inputs.build_aab_bundle == 'true' && 'Google/Android.aab' ||  'Google/Android.apk'  }}

      - name: Notify slack
        run: |
            curl -X POST -H 'Content-type: application/json' --data '{"text": "",
              "attachments": [
                {
                  "title": "Google Build complete",
                  "color": "28a745",
                  "fields": [
                    {
                      "title": "Project",
                      "short": true,
                      "value": "${{ github.event.repository.name }} Build ${{ steps.version_code.outputs.code }}"
                    }
                  ]
                }
              ]}' ${{ secrets.SLACK_WEBHOOK_URL }}

