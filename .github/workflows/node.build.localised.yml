name: Build All Languages

on:
  workflow_call: 
    inputs:
      include_iframe:
        description: 'Include iFrame'
        type: string
        default: "false"
      deployment_directory:
        description: 'Deployment Directory'
        type: string
        default: ""
      folder_to_deploy_from:
        description: 'Folder To Deploy From'
        type: string
        default: "dist-"

jobs:
  processLanguages:
    name: Process Languages
    runs-on: ubuntu-latest
    outputs:
        langs: ${{ steps.language.outputs.prop }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Language
        id: language
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'build.config.json'
          prop_path: 'buildLanguages'

      - run: echo ${{steps.language.outputs.prop}} 

  build:
    name: Build Multi Language
    runs-on: ubuntu-latest
    needs: processLanguages
    strategy:
      matrix:
        language: ${{ fromJson(needs.processLanguages.outputs.langs) }}

    steps:
      - name: Add SSH key to chekout a private repo
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.NODE_AUDIO_SSH_KEY }}

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8.0.1

      - name: Update Deployment Directory
        run: deployment_directory=${deployment_directory/${branch}/${{ steps.branch-name.outputs.current_branch }}}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y-%m-%d')" >> $GITHUB_ENV 

      - name: Update build.config.json
        run: echo "`jq '.includeIFrame=${{ inputs.include_iframe }}' build.config.json`" > build.config.json

      - name: Force lang
        run: echo "`jq '.buildSingleLanguage="${{ matrix.language }}"' build.config.json`" > build.config.json

      - name: Get version code
        id: version_code
        uses: lucasfe/version_code_generator@3.9.4

      - name: Authenticate with private NPM package
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_PAT }}" > ~/.npmrc

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      
      - name: Setup NPM
        run: npm ci --ignore-scripts
      - name: NPM Rebuild
        run: npm rebuild && npm run prepare --if-present

      - name: NPM run build:prod
        run: npm run build:prod

      - name: FTP Deploy
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ftp.scarybserver.com
          username: github@scarybserver.com
          password: ${{ secrets.ftp_password }}
          local-dir: ${{ inputs.folder_to_deploy_from }}${{ matrix.language }}/
          server-dir: ${{ inputs.deployment_directory }}/${{ env.NOW }}/${{ matrix.language }}/

      - name: Zip Artifacts
        run: |
            cd ${{ inputs.folder_to_deploy_from }}${{ matrix.language }}
            zip -r dist-${{ matrix.language }}.zip *
            cd -
            mv ${{ inputs.folder_to_deploy_from }}${{ matrix.language }}/dist-${{ matrix.language }}.zip dist-${{ matrix.language }}-${{ env.NOW }}.zip


      - name: Get dropbox token
        run: echo "DB_ACCES_TOKEN=$(curl https://api.dropbox.com/oauth2/token -d refresh_token=${{secrets.DROPBOX_REFRESH_TOKEN}} -d grant_type=refresh_token -d client_id=${{secrets.DROPBOX_CLIENT_ID}} -d client_secret=${{secrets.DROPBOX_CLIENT_SECRET}} | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")" >> $GITHUB_ENV

      - name: Archive to Dropbox
        run: |
            curl -X POST https://content.dropboxapi.com/2/files/upload \
              --header "Authorization: Bearer ${{ env.DB_ACCES_TOKEN }}" \
              --header "Dropbox-API-Arg: {\"autorename\":false,\"mode\":\"add\",\"mute\":false,\"path\":\"${{ format('/Clients/AppBuilds/{0}/{1}/{0}_{2}_{1}.zip', github.event.repository.name, env.NOW, matrix.language) }}\",\"strict_conflict\":false}" \
              --header "Content-Type: application/octet-stream" \
              --header 'Dropbox-API-Path-Root: {".tag": "root", "root": "10680416816"}' \
              --header "Dropbox-API-Select-Admin: ${{ secrets.DB_ADMIN_ID }}" \
              --data-binary @"dist-${{ matrix.language }}-${{ env.NOW }}.zip"

  post-build:
    name: Post Build
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Get version code
        id: version_code
        uses: lucasfe/version_code_generator@3.9.4

      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y-%m-%d')" >> $GITHUB_ENV 

      - name: Set repo name
        run: echo "REPOSITORY_NAME=${GITHUB_REPOSITORY}" >> $GITHUB_ENV

      - name: Set ref name
        run: echo "REF_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Set server url
        run: echo "SERVER_URL=${GITHUB_SERVER_URL}" >> $GITHUB_ENV

      - name: Set run id
        run: echo "RUN_ID=${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Get Language
        id: language
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'build.config.json'
          prop_path: 'buildLanguages'

      - name: Notify Teams
        if: ${{ success() }}
        run: |
          attachments='{"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"Localised build deployed!","themeColor":"00ff00","title":"${{ env.REPOSITORY_NAME }} localised build deployed ðŸš€","sections":[{"facts":['

          buildLanguages=$(echo ${{steps.language.outputs.prop}} | sed -e 's/\[//g' -e 's/\]//g' -e 's/\"//g'  -e 's/,/ /g; q')

          arr=( $buildLanguages )
          echo $arr

          for i in "${arr[@]}"
          do
              # do stuff with $i
              attachments+='{"name":"'"$i"' URL:","value":"http://www.scarybserver.com/clients/${{ inputs.deployment_directory }}/${{ env.NOW }}/'"$i"'"},'
          done

          attachments+='{"name":"Repository:","value":"${{ env.REPOSITORY_NAME }}"},{"name":"Branch:","value":"${{ env.REF_NAME }}"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"${{ env.SERVER_URL }}/${{ env.REPOSITORY_NAME }}/actions/runs/${{ env.RUN_ID }}" }] }] }'
          echo $attachments

          curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d "$attachments"