name: SB - iOS - Local

on:
  workflow_call: 
    inputs:
      development_build:
        description: 'Development Build'
        type: string
        default: 'false'
      bundle_id:
        description: 'Bundle ID to use'
        type: string
        default: ""
      apple_id:
        description: 'Apple id of the clients store page'
        type: string
        default: ""
      destination:
        description: 'Destination of build'
        type: string
        default: "AppCenter"
      offset_version_number:
        description: 'Offset Version Number Amount'
        type: string
        default: "0"
      export_xcode_project:
        description: 'Export xCode project after build'
        type: string
        default: 'false'
      build_platform:
        description: 'The platform that this build runs on'
        type: string
        default: 'self-hosted'

jobs:
  buildForiOS:
    name: Build iOS Project
    runs-on: self-hosted
    steps:

      - name: Checkout Git repo for project
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: 'iOS'
          submodules: recursive
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: false

      - name: Delete XCode Derrived Data
        run : |
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Delete XCode Archives
        run : |
          rm -rf ~/Library/Developer/Xcode/Archives

      - name: Delete prior test results
        run : |
          rm -rf ./iOS/Tests

      - name: Delete xcode project
        run : |
          rm -rf ./iOS/Build

      - name: Kill Unity
        continue-on-error: true
        if: always()
        run: |
           pkill -9 "Unity"

      - uses: akiojin/unity-get-version-github-action@v1.1.13
        id: unity-get-version
        with:
          project-directory: ./${{ matrix.platform }}

      - name: Get Unity Path
        id: unity-path
        run: |
          HUB_PATH="/Applications/Unity Hub.app/Contents/MacOS/Unity Hub"
          PROJECT_VERSIONS=$("$HUB_PATH" -- --headless editors -i)
          PROJECT_PATH="$(echo "$PROJECT_VERSIONS" | grep "${{ steps.unity-get-version.outputs.version }}" | rev | cut -d\  -f1 | rev)/Contents/MacOS/Unity"
          echo "::set-output name=unity_path::$PROJECT_PATH"

      - name: Run iOS editor tests
        continue-on-error: true
        timeout-minutes: 5
        run: |
          ${{ steps.unity-path.outputs.unity_path }} -runTests -batchmode -nographics -projectPath ./iOS -testResults ./Tests/iPhone/results.xml -buildTarget iOS -testPlatform EditMode

      - name: iPhone Test Report
        uses: dorny/test-reporter@main
        id: iPhone_test_results
        if: ${{ always() }} && ${{ hashFiles('./iOS/Tests/iPhone/results.xml') != '' }}
        with:
          name: iPhone Playmode Tests           # Name of the check run which will be created
          path: ./Tests/iPhone/results.xml   # Path to test results
          reporter: dotnet-nunit        # Format of test results
          working-directory: iOS

      - name: Upload Test Results
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: iPhone Test Results
          path: ./iOS/Tests/iPhone/results.xml

      - name: Notify Teams
        if: ${{ always() && steps.iPhone_test_results.outputs.conclusion == 'success' && steps.iPhone_test_results.outputs.passed > 0 }} 
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"$GITHUB_REPOSITORY iOS tests passed!","themeColor":"00ff00","title":"$GITHUB_REPOSITORY iOS tests passed!","sections":[{"facts":[{"name": "Tests Passed", "value":"${{ steps.iPhone_test_results.outputs.passed }}"}, {"name": "Tests Failed", "value":"${{ steps.iPhone_test_results.outputs.failed }}"}, {"name": "Tests Skipped", "value":"${{ steps.iPhone_test_results.outputs.skipped }}"}, {"name": "Test execution time", "value":"${{ steps.iPhone_test_results.outputs.time }}"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

      - name: Notify Teams
        if: ${{ always() && steps.iPhone_test_results.outputs.conclusion == 'failure' || steps.iPhone_test_results.outputs.passed == 0}} 
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"$GITHUB_REPOSITORY iOS tests failed!","themeColor":"ff0000","title":"$GITHUB_REPOSITORY iOS tests failed!","sections":[{"facts":[{"name": "Tests Passed", "value":"${{ steps.iPhone_test_results.outputs.passed }}"}, {"name": "Tests Failed", "value":"${{ steps.iPhone_test_results.outputs.failed }}"}, {"name": "Tests Skipped", "value":"${{ steps.iPhone_test_results.outputs.skipped }}"}, {"name": "Test execution time", "value":"${{ steps.iPhone_test_results.outputs.time }}"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

      - shell: bash
        if: ${{ always() && steps.iPhone_test_results.outputs.conclusion == 'success' && steps.iPhone_test_results.outputs.passed > 0 }} 
        id: version_code
        run: |
          cd ${GITHUB_WORKSPACE}/iOS
          count=$(git rev-list --count HEAD)
          echo "Current count is ${count}"

          current_branch=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch is ${current_branch}"
          echo "::set-output name=code::$count"

      - shell: bash
        if: ${{ always() && steps.iPhone_test_results.outputs.conclusion == 'success' && steps.iPhone_test_results.outputs.passed > 0 }} 
        run: |
          echo ${{ steps.version_code.outputs.code }}
          echo ${{ steps.version_code.outputs.code }} > buildNumber.txt

      - name: Build iOS project
        if: ${{ always() && steps.iPhone_test_results.outputs.conclusion == 'success' && steps.iPhone_test_results.outputs.passed > 0 }} 
        continue-on-error: true
        timeout-minutes: 15
        run: |
          ${{ steps.unity-path.outputs.unity_path }} -batchmode -nographics -projectPath ./iOS -buildTarget iOS -executeMethod ScaryBeasties.BuildSettings.Builder.BuildSettings.CommandLineBuild -platform iOS -development ${{ inputs.development_build }} -bundle_id ${{ inputs.bundle_id }} -project_name ${{ github.event.repository.name }} -addressables_profile 'Default' -build_number ${{ steps.version_code.outputs.code }} -build_number_offset '0' -customBuildPath 'Build/iOS'

      - name: Checkout Fastlane 
        if: ${{ always() && steps.iPhone_test_results.outputs.conclusion == 'success' || steps.iPhone_test_results.outputs.passed == 0}} 
        uses: actions/checkout@v4
        with:
          repository: scarybeasties/Fastlane
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./fastlane

      - name: Checkout Certs
        if: ${{ always() && steps.iPhone_test_results.outputs.conclusion == 'success' || steps.iPhone_test_results.outputs.passed == 0}}
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.MATCH_REPOSITORY }}
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./certs

      - name: Build to AppCenter
        if: ${{ always() && inputs.destination == 'AppCenter' && steps.iPhone_test_results.outputs.conclusion == 'success' || steps.iPhone_test_results.outputs.passed == 0}} 
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          SB_CERTIFICATE_PASSWORD: ${{ secrets.SB_CERTIFICATE_PASSWORD }}

          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}
          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}

          APPCENTER_API_TOKEN: ${{ secrets.APPCENTER_API_TOKEN }}
          APPCENTER_OWNER: ${{ secrets.APPCENTER_OWNER }}

          BUILD_PATH: ${{ format('{0}/iOS/build', github.workspace) }}
          BUNDLE_ID: ${{ inputs.bundle_id }}
          PROJECT_NAME: ${{ github.event.repository.name }}

        run: |
          pwd
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          find $BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          cd fastlane
          gem install bundler:2.4.6
          bundle install
          bundle exec fastlane ios BuildAppCenter

      - name: Build to testflight
        if: ${{ always() && inputs.destination == 'SB Testflight' && steps.iPhone_test_results.outputs.conclusion == 'success' || steps.iPhone_test_results.outputs.passed == 0}} 
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          SB_CERTIFICATE_PASSWORD: ${{ secrets.SB_CERTIFICATE_PASSWORD }}

          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}
          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}

          APPCENTER_API_TOKEN: ${{ secrets.APPCENTER_API_TOKEN }}
          APPCENTER_OWNER: ${{ secrets.APPCENTER_OWNER }}

          BUILD_PATH: ${{ format('{0}/iOS/build', github.workspace) }}
          BUNDLE_ID: ${{ inputs.bundle_id }}
          PROJECT_NAME: ${{ github.event.repository.name }}

          BUILD_NUMBER: ${{ steps.version_code.outputs.code }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 

        run: |
          pwd
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          find $BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          cd fastlane
          bundle install
          bundle exec fastlane ios BuildSBTestFlight

      - name: Notify Teams
        if: ${{ success() && inputs.destination == 'AppCenter' }}
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"iOS AppCenter Build Deployed!","themeColor":"00ff00","title":"$GITHUB_REPOSITORY iOS AppCenter Build Deployed! 🤖","sections":[{"facts":[{"name":"Build Number", "value":"${{ steps.version_code.outputs.code }}"},{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

      - name: Notify Teams
        if: ${{ success() && inputs.destination == 'SB Testflight' }}
        run: |
           cat << EOF > message.json
           {"@type":"MessageCard","@context":"https://schema.org/extensions","summary":"iOS SB Testflight Build Deployed!","themeColor":"00ff00","title":"$GITHUB_REPOSITORY iOS SB Testflight Build Deployed! 🚀","sections":[{"facts":[{"name":"Build Number", "value":"${{ steps.version_code.outputs.code }}"},{"name":"Repository:","value":"$GITHUB_REPOSITORY"},{"name":"Branch:","value":"$GITHUB_REF_NAME"}]}],"potentialAction":[{"@type":"OpenUri","name":"View on GitHub","targets":[{"os":"default","uri":"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"}]}]}
           EOF
           curl -X POST ${{ secrets.MSTEAMS_WEBHOOK }} --header 'Content-Type: application/json' -d @message.json

      - name: Kill Unity
        continue-on-error: true
        if: always()
        run: |
           pkill -9 "Unity"
