name: SB - Amazon

on:
  workflow_call: 
    inputs:
      development_build:
        description: 'Development Build'
        type: string
        default: "false"
      bundle_id:
        type: string
        description: 'Bundle ID to use'
        default: ""
      build_aab_bundle:
        description: 'Build AAB Bundle'
        type: string
        default: "false"
      destination:
        description: 'Destination of build'
        type: string
        default: "AppCenter"
      android_ndk_version: 
        description: 'optional NDK version'
        type: string
        default: ""

jobs:
  buildForGooglePlayPlatformDevelopment:
    name: Build Android (Amazon) Project
    runs-on: ubuntu-latest
    steps:
      - name: Setup NDK Version
        id: setup-ndk
        if: ${{ inputs.android_ndk_version != '' }}
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ inputs.android_ndk_version }}

      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Checkout Build Tools
        uses: actions/checkout@v2
        with:
          repository: scarybeasties/AndroidBuildTools
          token: ${{ secrets.GH_PAT }}
          ref: main
          path: ./AndroidBuildTools

      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-Android
          update: true

      - name: Get version code
        id: version_code
        uses: lucasfe/version_code_generator@v1.0.0

      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: Android
          androidAppBundle: ${{ github.event.inputs.build_aab_bundle }}
          buildMethod: BuildSettings.CommandLineBuild
          versioning: Tag
          customParameters: -platform Amazon -development ${{ inputs.development_build }} -project_name ${{ github.event.repository.name }} -bundle_id ${{ inputs.bundle_id }} -addressables_profile Default -app_bundles ${{ inputs.build_aab_bundle }} -android_ndk_home ${{ steps.setup-ndk.outputs.ndk-path }} -build_number ${{ steps.version_code.outputs.code }} -buildVersion none

      - name: Rename apk binary file 
        if: ${{ inputs.destination == 'AppCenter' }}
        run: sudo mv Google/**/*.apk Google/Android.apk || true
      - name: Rename aab binary file 
        if: ${{ inputs.destination == 'AppCenter' }}
        run: sudo mv Google/**/*.aab Google/Android.aab || true

      - name: Create the app on AppCenter if it doesnt exist
        if: ${{ inputs.destination == 'AppCenter' }}
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        continue-on-error: true
        with:
          command: appcenter apps create -d ${{ github.event.repository.name }}_Android -n ${{ github.event.repository.name }}_Android -o Android -p Unity
          token: ${{secrets.APPCENTER_API_TOKEN}}

      - name: Upload APK to AppCenter
        if: ${{ inputs.destination == 'AppCenter' }}
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        with:
          command: appcenter distribute release -f ${{ inputs.build_aab_bundle == 'true' && 'Google/Android.aab' || 'Google/Android.apk' }} -a phil-bn62/${{ github.event.repository.name }}_Android --group Collaborators
          token: ${{secrets.APPCENTER_API_TOKEN}}

      - name: Get dropbox token
        run: echo "DB_ACCES_TOKEN=$(curl https://api.dropbox.com/oauth2/token -d refresh_token=${{secrets.DROPBOX_REFRESH_TOKEN}} -d grant_type=refresh_token -d client_id=${{secrets.DROPBOX_CLIENT_ID}} -d client_secret=${{secrets.DROPBOX_CLIENT_SECRET}} | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")" >> $GITHUB_ENV

      - name: Archive to Dropbox
        if: ${{ inputs.destination == 'Dropbox' }}
        uses: aTable/deploy-to-dropbox@v1.0.7
        with:
          GLOB: ${{ inputs.build_aab_bundle == 'true' && 'Google/**/*.aab' ||  'Google/**/*.apk'  }} 
          DROPBOX_ACCESS_TOKEN: ${{ env.DB_ACCES_TOKEN }}
          DROPBOX_DESTINATION_PATH_PREFIX: ${{ format('/AppBuilds/{0}/', github.event.repository.name) }}
          DEBUG: true

      - name: Clear cache to allow recaching
        uses: actions/github-script@v6
        with:
          script: |
            console.log("About to clear")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.id == 'Library-Android')
              {
                github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
              }
            }
            console.log("Clear completed")

      - name: Cleanup to avoid storage limit
        if: always()
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-Android

